Python Advanced
===============

Toby Dussek

March 4-7 2024

Repo https://github.com/onionmccabbage/pyAdvMar24
Recordings: https://s3.eu-west-1.amazonaws.com/neueda.conygre.com/Sites/Ericsson_Advanced_Python/site/index.html
usr: neueda pwd: c0nygre

You will need:
- Python 3.x
- an editor (e.g. VS Code, PyCharm etc.)
- internet, with permission to install python libraries (e.g. requests library)

Python code lives in classes (or in functions), in modules, which live in packages (folders)

9:00
10:30 break (15 mins)
12:00 lunch (1 hr)
2:30 break (15 minutes)
4:00 end


Monday
> intro and welcome
  - what do you currently know
  - what do you want to know
> classes 
> abstract and concrete classes
> using slots
> resolve problem with inherit from ABCMeta
> validate types: isinstance, type, int(float())
> inheritance
> name mangled members
> comparing classes for equality (see compare_equality.py)
  override the __eq__ method to define what you mean by equality
> if __name__== '__main__'
> using decorators
> after lunch review
> functional programming: map, filter and reduce  
> functional programming: parameters

Tuesday
> Loading local and remote data (requests)
> how to convert bytes back to string
> processing text/json
  - json.loads() takes JSON and returns Python structure
  - json.dumps() takes Python structure and returns JSON
> persisting files: read/write/append/exclusive/overwrite, text, bytes, json
> 'with' operator for clean handling of assets
> redirect stdout
> databases
  see https://wiki.python.org/moin/DatabaseProgramming
  also useful: add 'sqlite viewer' plugin to VSCode
> other db connections (inc no-sql)
> Create, Read and Update (and Delete) - CRUD operations
> populate db with sample data
> read and nicely format values from the db
> explore 'typicode' API as a static data source for JSON
> after lunch review exercise 
  ask questions, help each other, share code (screen-share)
> we will be using the 'requests' library
  (you may come across the urllib.requests which is the old-skool way of doing things)
> using slots with classes

Wednesday
> conclude our look at requests. we also have POST, PUT, DELETE etc.
> venv and configuring environments
> comprehensions, generators and yield
> decorator syntax
> context manager to switch context e.g. for handling data input and output
> networking server/client (microservices)
> overview of Flask
> immediate mode Python
  - >>> is the context
  - any results are immediately show - this uses __repr__ not __str__
- Testing: (only really works if there is a good spec')
  > doctest revisited
  see https://docs.python.org/3/library/doctest.html
  - unittest
> after lunch lab exercise
- pytest see https://docs.pytest.org/

Thursday
- profiling: timings etc. (cprofile)
- multithreading, also limits of mutlithreading concurrency
  - how threads are done
  - concurrency and resources (lock shared resources)
  - async await
- which Python...
- the global Interpreter Lock (GIL) will affect threading performance
  the classic cpython will be stymied by the GIL
  jython (Java) an ironpython (.NET) are NOT limited in this way
- using thread locks
- using thread events
- Python has -O to optimize code (especially useful for threading)
  -O will attempt to optimize the code especially god for threading
> logging, context mgr, often we log by time-stamp
- named tuple
- after lunch review
- zip, deque, iter etc
- end of course feedbacks (internal and Neueda)
  https://apps.powerapps.com/play/17579985-153c-4727-b1f4-8b53e48b5e72?tenantId=92e84ceb-fbfd-47ab-be52-080c6b87953f&Type=ILT&ID=LZU1500681&OID=513891&Title=Advanced%20Python&Owner=Ankit%20Sayal
  https://easyretro.io/publicboard/NTDqkkm6utgJFD9cdBrdb4sI6n72/c4f17960-8b00-4a35-bad9-8e8e5d0a4a53


Recordings usr neueda pwd c0nygre

Other Useful Resources
- https://pynative.com/python-exercises-with-solutions/
- https://realpython.com/
- moving from Py2 to Py3 https://docs.python.org/3/howto/pyporting.html